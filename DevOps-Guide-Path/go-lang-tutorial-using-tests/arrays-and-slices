## Arrays and slices
* When you have an array, it is very common to have to iterate over them. So let's use our new-found knowledge of for to make a Sum function. Sum will take an array of numbers and return the total.

* Create a new folder to work in. Create a new file called sum_test.go and insert the following:
$ vi sum_test.go
package main

import "testing"

func TestSum(t *testing.T) {

	numbers := [5]int{1, 2, 3, 4, 5}

	got := Sum(numbers)
	want := 15

	if got != want {
		t.Errorf("got %d want %d given, %v", got, want, numbers)
	}
}
IMPORTANT_NOTES: We can initialize an array in two ways:
- [N]type{value1, value2, ..., valueN} e.g. numbers := [5]int{1, 2, 3, 4, 5}
- [...]type{value1, value2, ..., valueN} e.g. numbers := [...]int{1, 2, 3, 4, 5}
- It is sometimes useful to also print the inputs to the function in the error message. Here, we are using the %v placeholder to print the "default" format, which works well for arrays.
- Read more about the format strings: https://pkg.go.dev/fmt
Output:
# example.com/m/arrays-and-slices [example.com/m/arrays-and-slices.test]
./sum_test.go:9:9: undefined: Sum
FAIL    example.com/m/arrays-and-slices [build failed]
* to fix this you must initialize another mod
$ go mod init tidy
$ go mod tidy
Output:
# main [main.test]
./sum_test.go:9:9: undefined: Sum
FAIL    main [build failed]

* create a file called sum.go
$ vi sum.go
package main

func Sum(numbers [5]int) int {
	return 0
}
* Now test it
$ go test
Output:
go: warning: ignoring go.mod in $GOPATH /home/elle/go-project
--- FAIL: TestSum (0.00s)
    sum_test.go:15: got 0 want 15 given, [1 2 3 4 5]
FAIL
exit status 1
FAIL    tidy    0.001s

* Re-write the func in sum.go file
$ sum.go
func Sum(numbers [5]int) int {
	sum := 0
	for i := 0; i < 5; i++ {
		sum += numbers[i]
	}
	return sum
}
Output: #it should be passed now if you run go test
go: warning: ignoring go.mod in $GOPATH /home/elle/go-project
PASS
ok      tidy    0.001s

# Refactor
* Now lets use 'range' to help clean up our code in sum.go
$ vi sum.go
func Sum(numbers [5]int) int {
	sum := 0
	for _, number := range numbers {
		sum += number
	}
	return sum
}

* As you can see wee use _ or blank identifier.
* Now lets use slice type. The syntax is very similar to arrays, you just omit the size when declaring them.
* Lets rewrite the the func in sum_test.go file
$ vi sum_test.go 
func TestSum(t *testing.T) {

	t.Run("collection of 5 numbers", func(t *testing.T) {
		numbers := [5]int{1, 2, 3, 4, 5}

		got := Sum(numbers)
		want := 15

		if got != want {
			t.Errorf("got %d want %d given, %v", got, want, numbers)
		}
	})

	t.Run("collection of any size", func(t *testing.T) {
		numbers := []int{1, 2, 3}

		got := Sum(numbers)
		want := 6

		if got != want {
			t.Errorf("got %d want %d given, %v", got, want, numbers)
		}
	})

}
* test it after you save
Output: This done not comple
go: warning: ignoring go.mod in $GOPATH /home/elle/go-project
# tidy [tidy.test]
./sum_test.go:23:14: cannot use numbers (variable of type []int) as [5]int value in argument to Sum
FAIL    tidy [build failed]

* to fix it rewrite the func in sum.go file
$ vi sum.go
func Sum(numbers []int) int {
	sum := 0
	for _, number := range numbers {
		sum += number
	}
	return sum
}
Output: #  still not compile, you will have to change the first test to pass in a slice rather than an array.
# tidy [tidy.test]
./sum_test.go:12:14: cannot use numbers (variable of type [5]int) as []int value in argument to Sum
FAIL    tidy [build failed]

* Improve our sum_test.go file by rewriting the func
$ vi sum_test.go
func TestSum(t *testing.T) {

	t.Run("collection of 5 numbers", func(t *testing.T) {
		numbers := []int{1, 2, 3, 4, 5}

		got := Sum(numbers)
		want := 15

		if got != want {
			t.Errorf("got %d want %d given, %v", got, want, numbers)
		}
	})

	t.Run("collection of any size", func(t *testing.T) {
		numbers := []int{1, 2, 3}

		got := Sum(numbers)
		want := 6

		if got != want {
			t.Errorf("got %d want %d given, %v", got, want, numbers)
		}
	})

}
Output: # it should pass when we test it
PASS
ok      tidy    0.001s

* Go's built-in testing toolkit features a coverage tool(LINK: https://blog.golang.org/cover). The coverage tool can help identify areas of your code not covered by tests. Try running go test -cover
$ go test -cover
Output:
PASS
coverage: 100.0% of statements
ok      tidy    0.001s

# Lets create a fucntion called 'SumAll' which will take a varying number of slices, returning a new slice containing the totals for each slice passed in.
* For example:
SumAll([]int{1,2}, []int{0,9}) would return []int{3, 9}
or
SumAll([]int{1,1,1}) would return []int{3}
$ vi sum_test.go
func TestSumAll(t *testing.T) {

	got := SumAll([]int{1, 2}, []int{0, 9})
	want := []int{3, 9}

	if got != want {
		t.Errorf("got %v want %v", got, want)
	}
}
* Try and run the test
Output:
./sum_test.go:35:9: undefined: SumAll
FAIL    tidy [build failed]

* We need to define SumAll according to what our test wants.
$ vi sum.go
func SumAll(numbersToSum ...[]int) []int {
	return nil
}
* Run the test
Output: This is valid, but our tests still won't compile!
./sum_test.go:38:5: invalid operation: got != want (slice can only be compared to nil)
FAIL    tidy [build failed]
* To fix this lets use 'reflect.DeepEqual' and don't forget to import 'reflect' in sum_test.go file
$ vi sum.go
func TestSumAll(t *testing.T) {

	got := SumAll([]int{1, 2}, []int{0, 9})
	want := []int{3, 9}

	if !reflect.DeepEqual(got, want) {
		t.Errorf("got %v want %v", got, want)
	}
}
* now test it
Output:  
--- FAIL: TestSumAll (0.00s)
    sum_test.go:40: got [] want [3 9]
FAIL
exit status 1
FAIL    tidy    0.001s

* to make it passed edit the func in sum.go file
$ vi sum.go
func SumAll(numbersToSum ...[]int) []int {
	lengthOfNumbers := len(numbersToSum)
	sums := make([]int, lengthOfNumbers)

	for i, numbers := range numbersToSum {
		sums[i] = Sum(numbers)
	}

	return sums
}
IMPORTANT_NOTS
- 'make' allows you to create a slice with a starting capacity of the 'len' of the 'numbersToSum' we need to work through.
- You can index slices like arrays with 'mySlice[N]' to get the value out or assign it a new value with '='
- The tests should now pass.


