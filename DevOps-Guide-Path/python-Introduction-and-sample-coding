## Python Introduction
# Print function
*Functions - is a part of our code that we can use in order to cause some effect or evaluate a value. Also is a block of code that only runs when it is called and used to cause an effect or evaluate a value.
TypeError: can only concatenate str (not "int") to str.

>>> print("Hello Future Python Programmer!")
output: Hello Future Python Programmer!
** Function Execution
Python:
  1. Checks function name
  2. Checks arguments passed
  3. Jumps into the function
  4. Executes the function
  5. Returns to your code
  6. Resumes execution 

>>> print("Hello \n Future Python Programmer!")
\n - The N stands for new line and the backslash lets Python know that the next character after the backslash has a special meaning means this brings the sentence with a new line.

end="" - means empty string instead of a new line("\n")
>>> print("Hello!", end="");\
... print("Python is a great language")
output: Hello! Python is a great language
>>> print("Hello!", end="!");\
... print("Python is a great language")
output: Hello!! Python is a great language

sep="-" or sep="♥" - This keyword allows you to control how python seperates the outputted arguments.
>>> print("Hello", "Future", "Python", "Programmer!", sep="-")
output: Hello-Future-Python-Programmer!
>>> print("Hello", "Future", "Python", "Programmer!", sep="♥")
output: Hello♥Future♥Python♥Programmer!

*print() Functions Summarize:
- is a built-in functions: can be used without importing it. 
- Allows us to print values to the console. 
- We can invoke it with parentheses. 
- We can pass the value we want to print as arguments between the parentheses.
- The backslash \ tells python that the next character has a special menaing (eg.\n).
- Keyword arguments such as 'sep' and 'end' can be used to format the output.

# Literals in Python
* Literals - use in order to encode data and put them into your code.

* 4 type of Literals
Literal types:
  1. Integers
    - Octal numbers (eg. 0o123)
    - Hexadecimal numbers (eg. 0x123)
  2. Floating point numbers (eg. 1e-22 or 89.394)
  3. Strings (eg. "Hello!") - Escape quotes eg. 'Hi \'hi\''
  4. Booleans (eg. True'1' or False'0')

# Operators in Python
Arithmetic Operators
add(+)
subtract(-)
multiple(*)
divide(/)
floor divide (//)
modulo(%)
exponential(**)

# Variables in Python
* Variable kind of as a bucket of store a value.
- Valid Variable Name
amount_of_apples
cost_of_apple
_total_cost
COST_OF_APPLE
- Invalid Variable Name
am*unt_o%_app|es
c*st_o%_apple
5apples_cost
lastly, the name of the variable can't be any of Python's reserved words.

* Varialbes Summarize:
- Variables allow you to store values.
- A Variable has a valid name(letters, digits, underscore, not a reserved keyword)
- Python is dynamically typed: variables can be redeclared.
- We can use shortcut operators in order to cleanly redeclare a variable.
- We can combine text and variables using the + operator in the print function.
>>> cost_of_apple = 5
>>> print("One apple costs: " + cost_of_apple	)
output: One apple costs: 5

# Comments
* Comments summary
- Comments allow you add information for humans to your code.
- A comment is created by a # followed by text.
- A multi-line comment should have a # in front of every line.
- Don't write unnecessary comments, write self-documenting code instead.

# Input
* Type Casting
- Integers > int()
- Floating point > float()
* Sample codings
>>> age = input("How old are you? ")
output: How old are you? 22
>>> print (int(age) - 10))
output: 12
>>> age = int(input("How old are you? "))
output: How old are you? 22
>>> print (age - 10)
output: 12

* Input function summary
- Prompts the user to input some data from the console.
- It accepts an optional parameter that can be used in order to write a message before the user input.
- Always returns a string.
- A program that doesn't use any input function, is called a deaf program.

# String Methods
* Strings Operations summary
- You can user + in order to concatenate two strings.
>>>print("Hello" + " " + "there!")
output: Hello there!
- You can use * in order to repeat a string a several amount of times.
>>>print("ha" * 2)
output: haha
- With the str function, you can type-cast a number into a string.
>>>print(int("22"))
output: 22
>>>print(str("22"))
output: "22"

# Comparison Operators
* Equal(==) - checks if both values are equal to each other.
>>> print(2 == 2)
output: True
>>> print(2 == 4)
output: False
>>> print("Hello!" == "Hello!")
output: True
>>> print("Hello!" == "Goodbye!")
output: False
* NotEqual(!=)  - the opposite of the equal operator.
>>> print(2 != 2)
output: False
>>> print(2 != 4)
output: True
>>> print("Hello!" != "Hello!")
output: False
>>> print("Hello!" != "Goodbye!")
output: True
* Greater than(>) - checks if the left hand apparents is greater than the right hand apparent.
>>> print(4 > 2)
output: True
>>> print(2 > 4)
output: False
>>> print(2 > 2)
output: False
* Greater than or equal to(>=) - almost identical to the greater than operator, but also returns true if both values are equal to each other.
>>> print(4 >= 2)
output: True
>>> print(2 >= 4)
output: False
>>> print(2 >= 2)
output: True
* smaller or less than(<) - returns true if the left hand apparent is smaller than the  right hand apparent.
>>> print(4 < 2)
output: False
>>> print(2 < 4)
output: True
>>> print(2 < 2)
output: True
* smaller or less than or equal to(<=) - also returns true if both values are equal to each other.
>>> print(4 <= 2)
output: False
>>> print(2 <= 4)
output: True
>>> print(2 <= 2)
output: True

# Conditional Statements
What keyword would you use to add an alternative condition to an if statement?
Answer: elif
* sample in codes
a = 5
b = 10
if b > a:
  print("b is greater than a")
output: True
---
x = 3
if ( x == 0 ):
  print("Am I here?")
elif ( x == 3 ):
  print("Or here?")
print("Or over here?")
output: Or here?
	Or over here?
---
a = 5
b = 10
if b < a:
  print("a is greater than b")
elif a == b:
  b = 5
  print("a and b are equal")
else:
  print("b is greater than a")
output: b is greater than a
---
x = 0
a = 6
b = 6
if a > 0:
    if b < 0: 
        x = x + 6 
    elif a > 6:
        x = x + 5
    else:
        x = x + 4
else:
    x = x + 3
print(x)
output: 4

# Loops - While
* While loops - allows you to execute code as long as a certain condition is true.
* Sample in codings
secret_number = 3
guess = int(input("Guess the number: "))
while guess != secret_number:
  guess = int(input("Guess the number: "))
else:
  print("Congratulations, you got it!")
Execution of user:
Guess a number: 0
Guess a number: 4
Guess a number: 3
Congratulations, you got it!
---
i = 2
while True:
    if i%3 == 0:
        break
    print(i)
    i += 2
answer: 2 and 4
---
x = 0
while (x < 50):
  x+=2
print(x)
Answer:
In the "while" loop as per statement "x" is increased by 2. Like 2, 4, 6 … 48 50. 
Value 50 is not satisfying the given condition so it's exited from the loop and the final value we got for "x" is 50.
---
i = 1
x = 3
sum = 0
while ( i <= x ):
 sum += i
 i += 1
print(sum)
answer: 6
---
i = 5
while True:
    if i % 0o11 == 0:
        break
    print(i)
    i += 1
answer: 5,6,7,8

# Loops - for
* Samples in codings
x = 'abcd'
for num in range(5, 11):
  print(num)
Output:
5
6
7
8
9
10
---
x = 'abcd'
for i in x:
    print(i)
    x.upper()
Output:
a
b
c
d
x = 'abcd'
for i in range(len(x)):
    print("hello")
output:
hello
hello
hello
hello
---
We want to iterate over the values from 0 to 10, and print their values. However, we want to skip all the values that are even.
for num in range(0, 11):
	if num % 2 != 0: print(num);
print(num)
Output:
1
3
5
7
9
10

* Summary of Python using loops
- 'if/else' statements allow us to conditionally run code.
- A 'while' loop makes it possible to repetitively execute code based on a certain condition.
- We can execute code for each iteam in a sequence with a for ... in loop.

# Operators
- will evaluate to true? False or True
* Sample in codings
x = 6
print(x > 4 and x < 12)
Output:
True
---
is_hungry = True
if(not is_hungry):
  print("You are not hungry")
else:
  print("You are hungry")
Output:
You are hungry

# Bitwise Operators
* Bitwise 'XOR' gives 1 if either of the bits is 1 and 0 when both of the bits are 1.
* Bitwise 'OR' gives 1 if either of the bits is 1 and 0 when both of the bits are 0.
* Bitwise 'AND' gives 1 if both of the bits is 1 and 0 when either of the bits are 0.
* Represents the bitwise XOR operator - ^

Conjunction(&) - Two 1 (1 & 1)
>>> print (15 & 22)
output: 6
Disjunction (|) - At least one 1 (1 | 1), (0 | 1), (1 | 0)
>>> print (15 | 22)
output: 31
Negation (~) - 
>>> print (~22)
output: 31
Exclusive (^) - Exactly 1 (0 ^ 1), (1 ^ 0)
>>> print (15 ^ 22)
output: 25

* Example in codings:
x=2
print(x << 2)
output: 8
---
output of the following Python expression
~200
output: -201
---
output of the following Python expression
pirnt(5^11)
output: 14	
---
What will be the output of the following Python code
a = 20
b = 5
print("a & b =", a & b)
output: a & b = 4
---
print(22 << 1)
output: 44
---
a = 20
b = 5
print("a | b =", a | b)
output: a | b = 21

* Summary of operators 
- Logical operators 'and not' and 'or' return boolean values based on the passed values.
- Bitwise operators '&|^' and '~' allow us to manipulate single bits of data, and return 0 or 1 based on the value of the bits that are used.
- Bit shifting can be done with the '<<' and '>>' operators.

# Lists
* Example in codings
numbers = [1, 2, 3, 4, 5]
numbers[4] = 6
print(numbers[4])
output: 6
---
list1 = [1, 2, 3, 4, 5]
list1[0] = 10
print(list1)
output: [10,2,3,4,5]
---
will reverse list1=[2,5,3,1] this code
list1[::-1]
---
list1 = [10, 11, 12, 13, 14]
print(list1[::3])
output: [10,13]

# Lists - Methods
* Example in codings
list1 = [10, 20, 30, 40, 50]
list1.append(60) #append to last part of the list
print(list1)
output: [10, 20, 30, 40, 50, 60]
---
list1 = [4, 4, 3, 1]
list1.pop(2) # Remove the array value.
print(list1)
output: [4, 4, 1]
---
list1=["Go","Java","C","Python"]
print(max(list1)) #print the last part on the list
output: Python 
---
What is the len(list1) 
list1=['h', 'e', 'l', 'l', 'o']
Ans: 5
---
ages = [56, 72, 24, 46]
ages.sort()
print(ages)
output: [24, 46, 56, 72]
---
list1=["Go","Java","C","Rust"]
print(min(list1)) #print the last second part on the list
output: C
---
list1=['UK','India','Canada']
list1.insert(1,8)
print(list1)
output: ['UK', 8, 'India', 'Canada']

# Interating Lists
* Example in codings
for letter in 'KodeKloud':
    if letter == 'e':
        continue
    print('Letter : ' + letter)
output:
Letter : K
Letter : o
Letter : d
Letter : K
Letter : l
Letter : o
Letter : u
Letter : d
---
sum = 0
values = [2,9,1,7]
for number in values:
    sum += number
print(sum)
Output: 19
---
for x in [0, 1, 1, 3]:
    for y in [0, 2, 1, 2]:
            print('*')
output:
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*

# Understanding Lists
# Example in codings
list1 = [[1,2,3,2,5],[4,5,6,7],[8,9,10]]
for i in list1:
      if len(i)==3:
        print(i)
Output: [8,9,10]
---
list1 = [1, 2, 3, 4]
for i, j in enumerate(list1):
     print(i, j)
Output:
0 1
1 2
2 3 
3 4 
---
letters = ["A", "B", "C", "D", "E"]
print(letters[1:])
Output: ['B', 'C', 'D', 'E']
---
list1 = [10, 11, 12, 13, 14]
print(list1[::1])
Output: [10, 11, 12, 13, 14]

# Slicing lists
& Example in codings
list1 = [1, 66, "python", [11, 55, "cat"], [ ], 2.22, True]
print(list1[0:4])
Output: [1, 66, 'python', [11, 55, 'cat']]
---
my_list = [0, 1, 2, 3, 4]
print(my_list[2:4])
Output: [2,3]
---
my_list = [0, 1, 2, 3, 4]
my_list.append("python")
print(my_list[2:])
Output: [2,3,4,'python']
---
my_list = [0, 1, 2, 3, 4]
print(my_list[::3])
Output: [0, 3]
---
my_list = [0, 1, 2, 3, 4]
my_list.append("python")
b = my_list[1:]
print(b)
Output: [1, 2, 3, 4, 'python']

# Finding in Lists
* Example in codings
countries = ["USA", "Canada", "India"]
countries[0], countries[1] = countries[1], countries[0]
print(countries)
Output: ["Canada", "USA", "India"]
---
my_list = [0, 3, 4, 1, 2]
print(my_list.index(1))
Output: 3
---
list1=[3,4,6,1,2]
list2=list1
list1[0]=9
print(list2)
Output : [9, 4, 6, 1, 2]
---
list1 = [0, 3, 4, 1, 2]
list1[2:4]=[1,2]
print(list1)
Output: [0, 3, 1, 2, 2]
---
list1 = [0, 3, 4, 1, 2]
list1[2:5]=[8,9]
print(list1)
Output: [0, 3, 8, 9]
---
list1 = [0, 3, 4, 1, 2]
list1[1]=[8,9]
print(list1)
Output: [0, [8, 9], 4, 1, 2]

# Nested Lists - 2D
* Example in codings
a = []
for i in range(5):
    a.append([])
    for j in range(5):
        a[i].append(j)
print(a[2][3])
Output: 3
---
a = []
for i in range(2):
    a.append([])
    for j in range(2):
        a[i].append(j)
print(a)
Output: [[0, 1], [0, 1]]
---
countries = [['Egypt', 'USA', 'India'],
       ['Dubai', 'America', 'Spain'], 
       ['London', 'England', 'France']]
countries2  = [country for sublist in countries for country in 
                       sublist if len(country) < 6]
print(countries2)
Output: ['Egypt', 'USA', 'India', 'Dubai', 'Spain']

# Nested List 3D
* Example in codings
matrix = [[[k for k in range(3)] for j in range(3)] for i in range(3)]
print(matrix[1][2])
Output: [0, 1, 2]
---
matrix = [[[k for k in range(3)] for j in range(3)] for i in range(3)]
print(matrix[0][0][1])
Output: 1

# Functions
* The function can have different parameters or may not have any at all. If any data (parameters) are passed, they are passed explicitly.
* Example in codings
def my_function(*students):
  print("The tallest student is " + students[2])
my_function("James", "Ella", "Jackson")
Output: The tallest student is Jackson
---
def print_info(name, age=18):
    print(name, age)
print_info('john', 19)
Output: john 19

# Arguments
* Example in codings
a = 0
def add_three(a):
	return a+3
result = add_three(a)
print(result)
Output: 3
---
nums= [7,4,1]
def change_third_item(list):
	list[2] = 5
change_third_item(nums)
print(nums)
Output: [7, 4, 5]

# Return Statement
* Example in codings
def return_greeting():
  return "Hello, World"
print(return_greeting())
Output: Hello, World
---
def square(i):
    j = i * i
    return j
num = 2
result = square(num)
print("The result of ", num, " is ", result)
Output: The result of  2  is  4
---
def square(i):
    j = i * i
    return j
print(square(3))
Output: 9

# Function - List as Argument
* Example in codings
def get_odd_func(numbers):
    odd_numbers = [num for num in numbers if num % 2]
    return odd_numbers
print(get_odd_func([1, 2, 3, 4, 5, 6]))
Output: [1, 3, 5]
---
def my_function(numbers):
  for i in numbers:
    print(i+1, end=' ')
numbers = [1, 2, 3] 
my_function(numbers)
Output: 2 3 4 
---
def mean_func(list1):
    return sum(list1) / len(list1)
print(mean_func([5, 6, 7, 8]))
Output: 6.5
---
def my_function(names):
  for i in names:
    print(i, end=' ')
names = ["john", "mark", "emmy"]
my_function(names)
Output: john mark emmy

