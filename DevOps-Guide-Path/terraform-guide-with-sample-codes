# Infrastructures as Code(IAC)
IAC Tools for Configuration management > maintain a consistent and standard structure of code, and this makes it easier to manage and update it as needed.
These are commonly used to install and manage software on existing infrastructure such as servers, databases, networking devices, etc...
- Anisble
- Puppet
- SaltStack

IAC Tools for templating tools > can be used to create a custom image of a virtual machine or a container. These images already contain all the required software and dependencies installed on them. Server templating tools also promote immutable infrastructure, unlike configuration manaagement tools. This means that once the VM or a container is deployed, it is designed to remain unchanged.
- Docker.
- HashiCorp Packer
- HashiCorp Vagrant

IAC Tools for Provisioning tools > these tools are used to provision infrastructure components using a simple declarative code.
- HashiCorp Terraform
- CloudFormation

# Declarive in Terraform
$ terraform init - initializes the project and identifies the providers to be used for the target environment.
$ terraform plan - drafts a plan to get to the target state.
$ terraform apply - makes the necessary changes required on the target environment to bring it to the desired state

# Resource in Terraform > A resource can be a compute instance, a database server in the cloud or on physical server on premise that teraform manages.
# Terrafrom State > it can determine what actions to take when updating resources for a particular platform. Terraform can ensure that the entire infrastructure us always in the defined state at all times. Is a blueprint of the infrastructure deployed by Terraform.

# Installing terraform
* Command to download terraform binaries in Debian/Ubuntu
$ wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
$ echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
$ sudo apt update && sudo apt install terraform
$ terraform version - to check the version installed on your local machine.
$ terraform destroy - to destroy all resources we created.
* Terraform uses configuration files which are written in HCL to deploy infrastructure resources.
* Terraform Resource - is an object that terraform manages. It could be a file on a local host, or it could be a virtual machine on the cloud such as ec2 intance.
#Sample local code structure
<block> <parameters> {
  key1 = value1
  key2 = value2
}
* HCL files consists of blocks and arguments. A block is defined within curly braces and it contains a set of arguments in key value pair format representing the configuration data. In simplest form, a block in terraform contains information about t he infrastructure platform and a set of resources within that platform that we want to create.
* local_sensitive_file resource type to mask the contents of the file from the execution plan.

## Terraform basics
# Providers
$ ll .terraform/providers/registry.terraform.io/hashicorp/ - sample command and directory where the providers stored in the current directory that you perform terraform init.
here's the link for the terraform providers: https://registry.terraform.io/browse/providers
Providers are a logical abstraction of an upstream API. They are responsible for understanding API interactions and exposing resources.

# Configuration Directory
/root/terraform-local-file - sample of our configuration directory.
File Name	    |	      Purpose
main.tf		    - Main configuration file containing resource definition.
variables.tf	- Contains variable declarations.
outputs.tf	  - Contains outputs from resources.
provider.tf	  - Contains Provider definition.

IMPORTANT_NOTES: Whenever we add a resource for a provider that has not been used so far in the configuration directory, we have to initialize the directory by running terraform init command.

# Variables
* Example of variables.tf files
variable "filename" {
  default = "/root/pets.txt"
}
variable "content" {
  default = "We love pets!"
}
* Replacing the value on any terraform .tf files
resource "local_file" "pet" {
  filename = var.filename
  content = var.content
}
# Variables block in terraform accepts three parameters
* Example of variables.tf files with block
variable "filename" {
  default = "/root/pets.txt"
  type = string
  desription = "the path of local file"
}
variable "content" {
  default = "We love pets!"
  type = string
  desription = "the content of the file"
}
variable "length" {
  default = 2
  type = number
  desription = "length of the pet name"
}
variable "password_change" {
  default = true
  type = bool
}
Basic variable types of variable.tf
Type        |       Example
string      -       "/root/pets.txt"
number      -       1
bool        -       true/false
any         -       Default Valie 
list        -       ["cat", "dog"]
map         -       pet1 = cat \ pet2 = dog
object      -       Complex Data Structure
tuple       -       Complex Data Structure
* Example of variables.tf files in list
$ vi variables.tf
variable "prefix" {
  default = ["Mr", "Mrs", "Sir"]
  type = list
}
$ vi main.tf
resource "random_pet" "my-pet" {
  prefix = var.prefix[0] #Default result would be Mr
}
* Example of variables.tf files in list of type
$ vi variables.tf
variable "prefix" {
  default = ["Mr", "Mrs", "Sir"]
  type = list(string)
}
$ vi variables.tf
variable "prefix" {
  default = [ 1, 2, 3 ]
  type = list(number)
}
* Example of variables.tf files in map and its using key value pair
$ vi variables.tf
variable file-content {
  type = map
  default = {
    "statement1" = "We love pets!"
    "statement2" = "We love animals!"
  }
}
$ vi main.tf
resource "local_file" "my-pet" {
  filename = "/root/pets.txt"
  content = var.file-content["statement2"]
}
* Example of variables.tf files in Map of a type
$ vi variables.tf
variable "cats" {
  default = {
    "color" = "brown"
    "name" = "bella"
  }
  type = map(string)
}
$ vi variables.tf
variable "et_count" {
  default = {
    "dogs" = 3
    "cats" = 1
    "goldfix" = 2
  }
  type = map(number)
}
* Example of variables.tf files in set
IMPORTANT_NOTES: the difference between a set and a list is that a set can't have duplicate elements.
$ vi variables.tf
variable "prefix" {
  default = ["Mr", "Mrs", "Sir"]
  type = set(string)
}
$ vi variables.tf
variable "age" {
  default = [ 10, 12, 15]
  type = set(number)
}
* Example of variables.tf files in objects
$ vi variables.tf
variable "bella" {
  type = object ({
    name = string #key value pair to "bella"
    color = string #key value pair to "brown"
    age = number #key value pair to 7
    food = list(string) #key value pair to ["fish", "chicken", "turkey"]
    favorite_pet = bool #key value pair to true
  })

  default {
    name = "bella"
    color = "brown"
    age = 7
    food = ["fish", "chicken", "turkey"]
    favorite_pet = true
  }
}
* Example of variables.tf files in tuples and its similar to a list and consist of a sequence of elements, also tuple can make use of elements of different variable types.
IMPORTANT_NOTES: the difference between a tuple and a list is that list uses elements of the same variable type, such as string or number.
$ vi variables.tf
variable kitty {
  type = tuple([string, number, bool])
  default = ["cat", 7, true]
}

# Using variables in Terraform
$ terraform plan -var "filename=/root/pets.txt" -var "content=We love pets!" -var "prefix=Mrs" -var "seperator=." -var "length=2"- Sample of Command Line Flags.
* Example using environment variables see below. 
$ export TF_VAR_filename="/root/pets.txt"
$ export TF_VAR_content="We love pets!"
$ export TF_VAR_prefix="Mrs"
$ export TF_VAR_separator="."
$ export TF_VAR_length="2"
* Example of terraform.tfvars this is a Variable Definition Files 
$ vi terraform.tfvars
filename="/root/pets.txt"
content="We love pets!"
prefix="Mrs"
separator="."
length="2"

$ terraform apply -var-file terraform.tfvars - example command to use any other file name ending with .tfvars.

* Variable Definition Precedence
Order       |       Option
1           -       Environment Variables
2           -       terraform.tfvars
3           -       *.auto.tfvars(alphabetical order)
4           -       -var or -var-file(command-line-flags) #This is the highest priority order and will overwrite any of the previous values.

IMPORTANT_NOTES: Terraform follows a variable definition precedence order to determine the value and the command line flag of "–var or –var-file" takes the highest priority.

# Resource Attribute Reference
$ <- dollar symbol is known as interpolation sequence.
* Attributes references are information related to the infrastructure we are configuring. We can obtain them only after our code is applied.
$ terraform show - command to view the attributes actually exported by the resource.
# Resource Dependencies
* When resources are deleted, Terraform deletes it in the reverse order the local file first and then the random pet. This type of dependency is called the implicit dependency.
* depends_on = [resource_type.resource_name] - this will ensure that the local file is only created after the random resources created. This type of dependency is called an explicit dependency.
How do we make use of implicit dependency? called reference expressions.
* Resource 'tls_private_key' generates a secure private key and encodes it as PEM. It is a logical resource that lives only in the terraform state.

* Example terraform file that can retrieve the generate private key on the specific directory.
$ vi key.tf 
resource "tls_private_key" "pvtkey" {
  algorithm = "RSA"
  rsa_bits  = "4096"
}
resource "local_file" "key_details" {
  filename = "/root/key.txt"
  content  = tls_private_key.pvtkey.private_key_pem
}

* Example terraform file that should depend on krill creation.
$ vi main.tf
main.tf 
resource "local_file" "whale" {
  filename = "/root/whale"
  content = "whale"
  depends_on = [local_file.krill]
}
resource "local_file" "krill" {
  filename = "/root/krill"
  content = "krill"
}

# Output Variables
* Terraform outputs are used for two things: either printing details about a resource/datasource/local/variable or exporting different details about these if we are using a module.
$ terraform output - command that will print all the output variables defined in all the files in the current configuration directory.
$ terraform output <output_resorce_name> - command that will print specifically the value of an existing output.

* Example of terraform output file
$ vi main.tf 
resource "random_pet" "my-pet" {
  length = var.length
}
output "pet-name" {
  value       = random_pet.my-pet.id
  description = "Record the value of pet ID generated by the random_pet resource"
}
resource "local_file" "welcome" {
  filename = "/root/message.txt"
  content  = "Welcome to Kodekloud."
}
output "welcome_message" {
  value = local_file.welcome.content
}

$vi variable.tf 
variable "prefix" {
  default = "Mrs"
}
variable "separator" {
  default = "."
}
variable "length" {
  default = "1"
}

## Terraform state
terraform.tfstate - a state file can be considered to be a blueprint of all the resources that are for managers out there in the real world.
* The state file is created within the configuration directory.
* a terraform state file cannot be disabled.
* a state file stored in JSON format.
IMPORTANT_NOTE: terraform init command does not create a state file. For a state file to be created, you must run terraform apply must be run at least once.

## Terraform command
$ terraform validate - command to check if everything is correct.
$ terraform fmt - command scans the configuration files in the current working directory and formats the code into a canonical format.
$ terraform providers - command to check what providers you use in the current dircetory.
$ terraform refresh - command to refresh or update the terraform state.
$ terraform graph - command used to create a visual representation of the dependencies in a terraform configuration or an execution plan.
IMPORTANT_NOTES: Install graphviz in ubuntu to check the logic of the infrastructures.
* apt install graphviz -y
$ terraform graph | dot -Tsvg > graph.svg - command to view the configuration of your infrastructure in a flowchart.

# Mutable vs Immutable infrastructure
* Mutable infrastructure can be changed after it's created, like editing a document.
* Immutable infrastructure cannot be changed once it's set up, like a snapshot that stays the same.

# Lifecycle rules
* Table terraform codes of lifecycle rules
Order	|	    Option		        | 	Definition
1	    - create_before_destroy	- Create the resource first and then destroy older.
2	    - prevent_destroy      	- Prevents destroy of resource.
3	    - ignore_changes      	- Ignore Changes to resource attributes(specific/all).
* Example codes of terraform lifecycle rules
resource "random_string" "string" {
  length = var.length
  keepers = {
    length = var.length
  }
  lifecycle {
    create_before_destroy = true
  }
}

$ terraform state show local_file.file - command to show a specific state in a resource type.

# Datasources
* A datasource can only read resource data and use that information within terraform.
* Comparison of Resource and Data Source.
	Resource				                        |	Data Source
Keyword: resource				                  - Keyword: data
Creates, Updates, Destroys infrastructure	- Only Reads Infrastructure
Also called Managed Resources			        - Also called Data Resources
* Example terraform file uses Data sources.
output "os-version" {
  value = data.local_file.os.content
}
data "local_file" "os" {
  filename = "/etc/os-release"
}

# Meta Arguments
* Meta arguments can be used within any resource block to change the behaviour of resources.

# Count arguments
* length function is used to calculate the size of a list, and we can use this function in the count meta argument to dynamically determine the size of the file name variable.
* Example terraform codes for count.
$ vi main.tf
resource "local_file" "pet" {
  filename = var.filename[count.index]
  count    = length(var.filename)
}
$ vi variable.tf
variable "filename" {
  default = [
    "/root/pets.txt",
    "/root/dogs.txt",
    "/root/cats.txt"
  ]
}

# for_each arguments
* for_each - only works with a map or set in the varibles file.
* Example terraform codes for_each.
$ vi main.tf
resource "local_file" "pet" {
  filename = each.value
  for_each = var.filename
}
$ vi variable.tf
variable "filename" {
  type = set(string)
  default = [
    "/root/pets.txt",
    "/root/dogs.txt",
    "/root/cats.txt"
  ]
}
* toset function
$ vi main.tf
resource "local_file" "pet" {
  filename = each.value
  for_each = toset(var.filename)
}
$ vi variable.tf
variable "filename" {
  type = list(string)
  default = [
    "/root/pets.txt",
    "/root/dogs.txt",
    "/root/cats.txt"
  ]
}

# Version Contraints
!= means "not equal to."
>= means "greater than or equal to."
<= means "less than or equal to."
~> means "approximately greater than or equal to."
* Example in the terraform code.
$ vi main.tf
terraform {
  required_providers {
    local = {
      source = "hashicorp/local"
      version ~> "1.4.0"
    }
  }
}
resource "local_file" "pet" {
  filename = "/root/pet.txt"
  content  = "We love pets!" 
}
