# Infrastructures as Code(IAC)
IAC Tools for Configuration management > maintain a consistent and standard structure of code, and this makes it easier to manage and update it as needed.
These are commonly used to install and manage software on existing infrastructure such as servers, databases, networking devices, etc...
- Anisble
- Puppet
- SaltStack

IAC Tools for templating tools > can be used to create a custom image of a virtual machine or a container. These images already contain all the required software and dependencies installed on them. Server templating tools also promote immutable infrastructure, unlike configuration manaagement tools. This means that once the VM or a container is deployed, it is designed to remain unchanged.
- Docker.
- HashiCorp Packer
- HashiCorp Vagrant

IAC Tools for Provisioning tools > these tools are used to provision infrastructure components using a simple declarative code.
- HashiCorp Terraform
- CloudFormation

# Declarive in Terraform
$ terraform init - initializes the project and identifies the providers to be used for the target environment.
$ terraform plan - drafts a plan to get to the target state.
$ terraform apply - makes the necessary changes required on the target environment to bring it to the desired state

# Resource in Terraform > A resource can be a compute instance, a database server in the cloud or on physical server on premise that teraform manages.
# Terrafrom State > it can determine what actions to take when updating resources for a particular platform. Terraform can ensure that the entire infrastructure us always in the defined state at all times. Is a blueprint of the infrastructure deployed by Terraform.

# Installing terraform
* Command to download terraform binaries in Debian/Ubuntu
$ wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
$ echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
$ sudo apt update && sudo apt install terraform
$ terraform version - to check the version installed on your local machine.
$ terraform destroy - to destroy all resources we created.
* Terraform uses configuration files which are written in HCL to deploy infrastructure resources.
* Terraform Resource - is an object that terraform manages. It could be a file on a local host, or it could be a virtual machine on the cloud such as ec2 intance.
#Sample local code structure
<block> <parameters> {
  key1 = value1
  key2 = value2
}
* HCL files consists of blocks and arguments. A block is defined within curly braces and it contains a set of arguments in key value pair format representing the configuration data. In simplest form, a block in terraform contains information about t he infrastructure platform and a set of resources within that platform that we want to create.
* local_sensitive_file resource type to mask the contents of the file from the execution plan.

## Terraform basics
# Providers
$ ll .terraform/providers/registry.terraform.io/hashicorp/ - sample command and directory where the providers stored in the current directory that you perform terraform init.
here's the link for the terraform providers: https://registry.terraform.io/browse/providers
Providers are a logical abstraction of an upstream API. They are responsible for understanding API interactions and exposing resources.

# Configuration Directory
/root/terraform-local-file - sample of our configuration directory.
File Name	    |	      Purpose
main.tf		    - Main configuration file containing resource definition.
variables.tf	- Contains variable declarations.
outputs.tf	  - Contains outputs from resources.
provider.tf	  - Contains Provider definition.

IMPORTANT_NOTES: Whenever we add a resource for a provider that has not been used so far in the configuration directory, we have to initialize the directory by running terraform init command.

# Variables
* Example of variables.tf files
variable "filename" {
  default = "/root/pets.txt"
}
variable "content" {
  default = "We love pets!"
}
* Replacing the value on any terraform .tf files
resource "local_file" "pet" {
  filename = var.filename
  content = var.content
}
# Variables block in terraform accepts three parameters
* Example of variables.tf files with block
variable "filename" {
  default = "/root/pets.txt"
  type = string
  desription = "the path of local file"
}
variable "content" {
  default = "We love pets!"
  type = string
  desription = "the content of the file"
}
variable "length" {
  default = 2
  type = number
  desription = "length of the pet name"
}
variable "password_change" {
  default = true
  type = bool
}
Basic variable types of variable.tf
Type        |       Example
string      -       "/root/pets.txt"
number      -       1
bool        -       true/false
any         -       Default Valie 
list        -       ["cat", "dog"]
map         -       pet1 = cat \ pet2 = dog
object      -       Complex Data Structure
tuple       -       Complex Data Structure
* Example of variables.tf files in list
$ vi variables.tf
variable "prefix" {
  default = ["Mr", "Mrs", "Sir"]
  type = list
}
$ vi main.tf
resource "random_pet" "my-pet" {
  prefix = var.prefix[0] #Default result would be Mr
}
* Example of variables.tf files in list of type
$ vi variables.tf
variable "prefix" {
  default = ["Mr", "Mrs", "Sir"]
  type = list(string)
}
$ vi variables.tf
variable "prefix" {
  default = [ 1, 2, 3 ]
  type = list(number)
}
* Example of variables.tf files in map and its using key value pair
$ vi variables.tf
variable file-content {
  type = map
  default = {
    "statement1" = "We love pets!"
    "statement2" = "We love animals!"
  }
}
$ vi main.tf
resource "local_file" "my-pet" {
  filename = "/root/pets.txt"
  content = var.file-content["statement2"]
}
* Example of variables.tf files in Map of a type
$ vi variables.tf
variable "cats" {
  default = {
    "color" = "brown"
    "name" = "bella"
  }
  type = map(string)
}
$ vi variables.tf
variable "et_count" {
  default = {
    "dogs" = 3
    "cats" = 1
    "goldfix" = 2
  }
  type = map(number)
}
* Example of variables.tf files in set
IMPORTANT_NOTES: the difference between a set and a list is that a set can't have duplicate elements.
$ vi variables.tf
variable "prefix" {
  default = ["Mr", "Mrs", "Sir"]
  type = set(string)
}
$ vi variables.tf
variable "age" {
  default = [ 10, 12, 15]
  type = set(number)
}
* Example of variables.tf files in objects
$ vi variables.tf
variable "bella" {
  type = object ({
    name = string #key value pair to "bella"
    color = string #key value pair to "brown"
    age = number #key value pair to 7
    food = list(string) #key value pair to ["fish", "chicken", "turkey"]
    favorite_pet = bool #key value pair to true
  })

  default {
    name = "bella"
    color = "brown"
    age = 7
    food = ["fish", "chicken", "turkey"]
    favorite_pet = true
  }
}
* Example of variables.tf files in tuples and its similar to a list and consist of a sequence of elements, also tuple can make use of elements of different variable types.
IMPORTANT_NOTES: the difference between a tuple and a list is that list uses elements of the same variable type, such as string or number.
$ vi variables.tf
variable kitty {
  type = tuple([string, number, bool])
  default = ["cat", 7, true]
}
