## Kubernetes Overview
To understand kubernetes(k8s) we must first understand two things like containerization and orchestration.
Container orchestration - the platform needs needs to orchestrate the connectivity between the containers and automatically scale up or down based on the load. This whole process of automatically deploying and managing containers is known as container orchestration.

# K8s architecture
Nodes or Minions - a node is a machine, physical or virtual, on which kubernetes is installed. A node is a worker machine, and that is where containers will be launched by k8s.
Cluster - a cluster is a set of nodes grouped together. This way even if one node fails, you have your application still accessible from the other nodes. Moreover, having multiple nodes helps in sharing load as well.
Master - master is another node with k8s installed in it and is configured as a master. The master watches over the nodes in the cluster and is responsible for the actual orchestration of containers on the worker nodes.
Components of k8s - API Server, ETCD, kubelet, container runtime, controllers, and scheduler.
API Server - acts as the front end for k8s. The users, management devices, CLI all talk to the API server to interact with the k8s cluster.
ETCD - is a distributed reliable key value store used by k8s to store all data used to manage the cluster. ETCD is responsible for implementing logs within the cluster to ensure that there are no conflicts between the masters.
Kubelet - is the agent that runs on each node in the cluster.The agent is responsible for making sure that the containers are running on the nodes as expected.
Container Runtime - is the underlying software that is used to run containers, for example Docker, but there are other options as well.
Controllers - are the brain behind orchestration. They are responsible for noticing and responding when nodes, containers or endpoints goes down. The controllers make decisions to bring up new containers in such cases.
Scheduler - is responsible for distributing work or containers across multiple nodes. It looks for newly created containers and assigns them to nodes.
kubectl - the kubectl tool is used to deploy and manage applications on a k8s cluster, to get cluster information, to get the status of other nodes in the cluster and to manage many other things.
* Sample command in the terminal.
kubectl run hello-minikube - this command is used to deploy an application on the cluster name hello-minikube.
kubectl cluster-info - this command is used to view information about the cluster.
kubectl get nodes - this command is used to list all the nodes that part of the cluster.

# k8s setup
Minikube or Microk8s - these are solutions for developers or those who want to just play around and learn k8s.
Kubeadm - the kubeadm tool is used to bootstrap and manage production grade k8s clusters.

# Installation and set up the kubectl tool:
Install and set up the kubectl tool: –
https://kubernetes.io/docs/tasks/tools/

Install Minikube: –
https://minikube.sigs.k8s.io/docs/start/

Install VirtualBox: –
https://www.virtualbox.org/wiki/Downloads
https://www.virtualbox.org/wiki/Linux_Downloads

Minikube Tutorial: –
https://kubernetes.io/docs/tutorials/hello-minikube/

If the minikube installation has been done on the Linux, then to access the URL on the local browser, we need to do a few steps to get the service URL to work. Those steps are covered on this documentation page: –

https://minikube.sigs.k8s.io/docs/handbook/accessing/#using-minikube-service-with-tunnel

# POD
# k8s Concepts
Pod - is the most basic and the smallest unit in k8s.
A note about creating pods using kubectl run.
To create a pod from the command line, use the command:
Create an NGINX Pod
kubectl run nginx --image=nginx
As of version 1.18, kubectl run (without any arguments such as --generator ) will create a pod instead of a deployment.
To create a deployment using imperative command, use kubectl create:
kubectl create deployment nginx --image=nginx
Kubernetes Concepts - https://kubernetes.io/docs/concepts/
Pod Overview- https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/

# K8s Concepts - PODs, ReplicaSets, Deployments.,
* A k8s definition file always contains four top level fields.
1. apiVersion: - is the version of the k8s API we are using to create the object. Example version is v1 and the other possible values for this field are apps/v1, apiVersion is a form of a String.
2. kind: - refers to the type of object we are trying to create. For example Pod other possible values here could be replica set or deployment or service, kind is a form of a String.
3. metadata: - is data about the object, like its name, labels, etc., metadata is a form of a dictionary.
4. spec: - this is where we would provide additional information to k8s pertaining to that object. spec is a form of a dictionary.

pod-definition.yml
# this is the sample yaml file that will create a single pod.
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app: myapp
    type: front-end
spec:
  containers:
  - name: nginx-container
    image: nginx

kubectl create/apply -f pod-definition.yaml - this command is to create a sample pod.
kubectl get pod - command to list all the pods running on your machine.
kubectl describe pod <POD_NAME> - command is to get a much more in depth information about the pod.
kubectl run redis --image=redis123 --dry-run=client -o yaml > redis-definition.yaml - this command is to automatically create a manifest file and create a filename call redis-definition.yaml.

# ReplicaSet
Replication Controller - is the older technology that is being replaced by replica set.
Replica Set - is the new recommended way to set up replication. In the ReplicaSet file, there are three important sections the template, replicas and selector. 
* sample yaml file for replication controller.
rc-definition.yml
apiVersion: v1
kind: ReplicationController
metadata: 
  name: myapp-rc
  labels:
    app: myapp
    type: front-end
spec:
  template:
    metadata:
      name: myapp-pod
      labels:
        app: myapp
        type: frontPOD
    spec:
      containers:
      - name: nginx-controller
        image: nginx

  replicas: 3

kubectl get replicationcontroller - command to view the list of created replication controllers.

* sample yaml file for replicaset. ReplicaSet has a selector.
replicaset-definition.yml
apiVersion: v1
kind: ReplicaSet
metadata: 
  name: myapp-rep
  labels:
    app: myapp
    type: front-end
spec:
  template:
    metadata:
      name: myapp-pod
      labels:
        app: myapp
        type: frontPOD
    spec:
      containers:
      - name: nginx-controller
        image: nginx

  replicas: 3
  selector:
    matchLabels:
      type: frontPOD

kubectl get replicaset - command to view the created replicaset.

# definition of Labels and Selectors.
Why do we label or pods and objects in k8s?
Sample scenario:
We deployed 3 intances of our front end web app as 3 parts and then we would like to create a replication controller or replica set to ensure that we have 3 active PODS at any time. And yes, this is one of the use case of replica sets. You can use it to monitor existing parts, in case they weren't created, the replica set will create them for you. The role of the ReplicaSet is to monitor the pods and if any of them were to fail, ReplicaSet deploy new ones. The ReplicaSet is in fact a process that monitors the PODs.

This is where labeling our PODs during creation comes in handy. We could now provide theses labels as a filter for ReplicaSet, under the selector section we use the matchLabels filter and provide the same label that we used while creating the PODs. This way the ReplicaSet knows which parts to monitor. The same concept of labels and selectors is used in many other places throughout k8s.

kubectl replace -f replicaset-definition.yml - this command is to update the configuration of your ReplicaSet.
kubectl scale --replicas=6 -f replicaset-definition.yml - command to scale the ReplicaSet to 6 from the manifest file.
kubectl delete replicaset myapp-replicaset - this command is to delete ReplicaSet and also deletes all underlying PODs.
kubectl api-resources | grep replicaset - this command is to check the apiVersion of ReplicaSet.
kubectl explain replicaset | grep VERSION - this command is to explain and filter only the version of ReplicaSet.

YAML tips - is to install Microsoft Visual Studio Code IDE.

# k8s Deployments
* sample yaml file for deployment.
vi deployment-definition.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp-deploy
  labels: 
    app: myapp
    type: front-end
spec:
  template:
    metadata:
      name: myapp-pod
      labels:
        app: myapp
        type: front-end
    spec:
      containers:
      - name: nginx-controller
        image: nginx
  replicas: 3
  selector:
    matchLabels:
      type: front-end

kubectl get all - commands to see all the created objects at once.

# Updates and rollback in Deployments.
* Two types of deployment Strategies.
1. Recreate strategy - This type of strategy is to take down all your applications and deploy a newer version. For example if you have 3 apps running in your cluster if you use Recreate strategy all your 3 apps will be destroyed and then deploy 3 new versions of your apps.
2. Rolling Update strategy - this type of strategy are we take down the older version and bring up a newer version 1 by 1.

kubectl set image deployment/myapp-deployment nginx=nginx:1.9.1 - commands to set the image or to update the image version of your deployment.
kubectl rollout status deployment/myapp-deployment - commands to check the status of new rollout deployment version.
kubectl rollout undo deployment/my-app-deployment - commands to detroy the PODs in the new ReplicaSet and bring the older ones up in the old ReplicaSet and your apps, is back to its older format.
kubectl rollout history deployment/myapp-deployment - commands to show the revisions and history of our deployment.
