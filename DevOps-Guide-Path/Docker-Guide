## Docker Command
# before using the below command is a must that the docker is installed in your system.
How to install it go to this website -> https://docs.docker.com/get-docker/
docker ps - this command is to list all containers running.
docker ps -a - this command will list all running as well as previously stopped or exited containers.
docker stop <CONTAINER_NAME> - this command is to stopped specific running container.
docker rm <CONTAINER_NAME> - this command is to remove, stopped or exited container permanently.
docker images - this command is to list available images and their sizes on your host.
docker rmi <REPOSITORY_NAME:TAG_NAME> - this command is to remove image, but you must ensure that no containers are running off on that image before attempting to remove.
docker run <IMAGE_NAME> - this command is to run an image.
docker pull <IMAGE_NAME> - this command is to only pull the image and don't run the image.
docker exec <CONTAINER_ID> cat /etc/hosts - command to execute a command on docker container.
docker run <IMAGE_NAME>AND_OR<kodekloud/simple-webapp> - command runs in the foreground or in an attached mode.
docker run -d <IMAGE_NAME> - command runs in the background mode.
docker attach <CONTAINER_ID> - command to specify and accessing the UI of the web server.
docker stop $(docker ps -aq) - this command is to stop all the containers at once.
docker rm $(docker ps -aq) - this command is to remove all the stopped containers at once.
docker rmi $(docker images -aq) - command is to stop and delete all the containers being used by images.
docker run -d --name webapp nginx:1.14-alpine - this command is to run a specific container and had a name in it.

# Docker run
* run with tag
docker run <IMAGE_NAME>:<TAG_NUMBER> - command that specify the tag name of the Image/docker.
* run with STDIN
docker run -it <IMAGE_NAME>:<TAG_NUMBER> - command for interactive mode when you want to input something and prints out. "-it" stands for a pseudo terminal.
* run with Port mapping
docker run -p <EXPOSED_PORT>:<INTERNAL_HOST> <IMAGE_NAME>:<TAG_NUMBER> - command to exposed and specify port of your docker container.
* run with Volume mapping
docker run -v /opt/datadir:/var/lib/mysql mysql - this command is to map and stored the data from /var/lib/mysql to /opt/datadir <- the data gather will store on you local host. 
* inspect container
docker inspect <CONTAINER_NAME> or <CONTAINER_ID> - command to see additional details about a specific container, all details return in JSON format.
* Container logs
docker logs <CONTAINER_NAME> - command to view the logs of the docker container.
* other docker run options
docker run -p 8080:8080 -v /opt/datadir:/var/jenkins_home -u root jenkins - this command runs a Docker container on port(-p) 8080, stores(-v) the data in /opt/datadir, and specifies the user(-u).

# Docker images
* How to create your own image?
1. OS - what operating system you'll be using for example Ubuntu.
2. Update apt repo.
3. Install dependencies using apt.
4. Install Python dependencies using pip.
5. Copy source code to /opt folder.
6. Run the web server using "flash" command.
* now create a Dockerfile has two stages the capital letter called as instruction and followed by the argument.
FROM Ubuntu

RUN apt-get update
RUN apt-get install python

RUN pip install flask
RUN pip install flask-mysql

COPY <APP_NAME> /opt/source-code

ENTRYPOINT FLASK_APP=/opt/source-code/app.py flask run

docker build Dockerfile -t <IMAGE_NAME>'or'<DOCKERHUB_ACCT>:<TAG_NAME> - this command is building an image locally on your system.
NOTE: before pushing an image to Dockerhub you must be logged in first to you local machine.
docker push <DOCKERHUB_ACCT>:<TAG_NAME> - this command is push your created image to make it available on the Public Docker Hub Registry.
docker history <IMAGE_NAME> - this command is to view the history when you are building an image.

# CMD vs Entrypoint
CMD command param1		CMD sleep 5
CMD ["command", "param1"]	CMD ["sleep", "5"]
NOTE: the command and its parameters should be seperate elements in the list.
docker run ubuntu-sleeper sleep 10 - this command append the data sleep on the docker container and change it to 10 seconds.
sample in ENTRYPOINT
FROM Ubuntu
ENTRYPOINT ["sleep"]
CMD["5"]
docker run ubuntu-sleeper 10 - this code is to overide and pass the parameters in the entrypoint. 

# ENV varaibles in Docker
docker run -e APP_COLOR=blue simple-webapp-color - this command is to set the environment of your docker container.
docker run -it <IMAGE_NAME> bash - this command runs the container and connects me into that particular container and as soon as I exit the container is going to stop.
